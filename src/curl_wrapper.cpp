/*
 * curl_wrapper.cpp
 * Andrew Mikalsen
 * 6/5/20
 */

#include <string>
#include <vector>
#include <curl/curl.h>
#include "curl_wrapper.hpp"

namespace ods {
    namespace curl {
        namespace {
            /**
             * Used by libcurl to assign the response buffer from a request to the specified string.
             * 
             * @arg buffer char* received after making the request
             * @arg size number that is always 1
             * @arg nmemb size of the char* received
             * @arg userp string that the char* buffer is written to
             */
            size_t write_data(void* buffer, size_t size, size_t nmemb, std::string& userp) {
                userp = (char*) buffer;
                return size * nmemb;
            }
        }

        void init() {
            curl_global_init(CURL_GLOBAL_ALL);
        }

        void cleanup() {
            curl_global_cleanup();
        }

        /**
         * Uses libcurl to perform a GET request to the specified url with the specified headers.
         * 
         * @arg url string set as the url
         * @arg headers vector of strings used to construct a curl string linked-list to set request headers
         * 
         * @return response from request as a string generated by write_data
         */
        std::string get(const std::string& url, const std::vector<std::string>& headers) {
            // string that curl will write the request response to
            std::string response;

            // initialize headers_slist, a linked-list of strings, which is used to specify the headers for the request
            curl_slist* headers_slist = nullptr;
            for (const std::string& h : headers) {
                headers_slist = curl_slist_append(headers_slist, h.c_str());
            }

            // execute the request
            CURL *handle = curl_easy_init();
            curl_easy_setopt(handle, CURLOPT_URL, url.c_str()); // set url
            curl_easy_setopt(handle, CURLOPT_WRITEFUNCTION, write_data); // let response be written to a string
            curl_easy_setopt(handle, CURLOPT_WRITEDATA, &response); // indicate the string to be written to
            curl_easy_setopt(handle, CURLOPT_HTTPHEADER, headers_slist); // set headers
            curl_easy_setopt(handle, CURLOPT_HTTPGET, 1L); // indicate a GET request
            CURLcode result = curl_easy_perform(handle);

			// free resources
            curl_easy_cleanup(handle);
			curl_slist_free_all(headers_slist);

            return response;
        }

        // TODO: implement
        std::string post(const std::string& url, const std::vector<std::string>& headers, const std::string& data);
    }
}
